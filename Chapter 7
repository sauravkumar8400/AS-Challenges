EXERCISE 1
yeet = [1, 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10]

count = 0
for i in yeet:
    if i % 2 == 1:
            count += 1
    print(count)

EXERCISE 2
yeet = [1, 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10]

sum = 0
for i in yeet:
    if i % 2 == 0:
           sum += i
    print(sum)
    
EXERCISE 3
yeet = [-1, 2 , -3 , 4 , -5 , 6 , -7 , 8 , -9 , 10]

sum = 0
for i in yeet:
    if i < 0:
           sum += i
    print(sum)

EXERCISE 4
yeet = ["f","oof","feels","five"]

len = 0
for i in yeet:
    if len == 5:
        print(i)

EXERCISE 5
yeet = [1, 2, 3, 4 , 5 , 6 ,7]


sum(yeet[0:3])
print(sum)

EXERCISE 6
yeet = ["t-pain", "tyga", "sam", "lil' pump"]

a = len(yeet)
if yeet == "sam":
    break
print(a)

EXERCISE 7
def sqrt(n):
    approx = n/2.0     # Start with some or other guess at the answer
    while True:
        better = (approx + n/approx)/2.0
        if abs(approx - better) < 0.001:
            return better
        print(better)
        approx = better

# Test cases
print(sqrt(25.0))

EXERCISE 8


EXERCISE 9

def print_triangular_numbers(n):
  a = 0
  for i in range(1,n+1,1):
    a += i
    print(a)

print_triangular_numbers(5)


EXERCISE 10

def is_prime(x):
  count = 0
  for i in range(2, x, 1):
    if x % i == 0:
      count = count+1
  if count == 0:
    print("True")
  else:
    print("False")
    

EXERCISE 11

import turtle

yeet =  [(160, 20), (-43, 10), (270, 8), (-43, 12)]

a = turtle.Screen()
b = turtle.Turtle()
b.pendown()

for (i,j) in yeet:
  b.left(i)
  b.forward(j)

a.exitonclick()

EXERCISE 12

import turtle

import turtle

window = turtle.Screen()

bob = turtle.Turtle()
bob.pensize(6)

bob.pendown()
bob.forward(30)
bob.right(-90)
bob.forward(30)
bob.right(-135)
bob.forward((1800**0.5))
bob.right(135)
bob.forward(30)
bob.right(53.13024)
bob.forward(20)
bob.right(73.73952)
bob.forward(20)
bob.right(143.13024)
bob.forward(30)
bob.left(135)
bob.forward((1800**0.5))

window.exitonclick()


EXERCISE 13

CAN, CAN, CANNOT, CANNOT, CAN, CANNOT


EXERCISE 14

def num_digits(n):
  count = 0
  if n == 0:
    print(1)
  else:
    while n != 0:
        count = count + 1
        n = n // 10
    print ( count )
    
    
EXERCISE 15

def num_even_digits(x):
  o = str(x)
  count = 0
  for i in range(0, len(o), 1):
    check = o[i:i+1]
    check = int(check)
    if check % 2 == 0:
      count += 1
  print(count)

number = 987698265
num_even_digits(number)

EXERCISE 16

List =[2, 4, 5]
def sum(L):
  total = 0
  for i in L:
    total += (i**2)
  print(total)

sum(List)
